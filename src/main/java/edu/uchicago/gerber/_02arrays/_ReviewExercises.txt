#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

R5.6 Parameters and return values.  The difference between an argument and a return value is that an argument is passed
into a method, whereas a return value is the value returned from it.

You can have n number of arguments, whereas you can only have one return value. By varying either the number and/or type of arguments,
you change the method's signature, which means you may overload a method. Varying the return value only does not change the
method's signature and therefore does not qualify the method for overloading.

Since Java5, you can even specify a variable number of arguments aka varargs which looks something like this:
 private String[] someMethod(int nGrade, String... strNickNames) {//implementation};
Notice that the varargs parameter "String... strNickNames" must be listed last.  Calling this method would look something like this:
 String[] strReturnValues = someMethod(99, "Jim", "Jamie", "James", "Jamey", "Jimmy", "Jimbo");

-------------------------------------------

R5.8 Pseudocode
let String ans = ""
for every character c in the telephone number:
    if the c is not a uppercase letter, add it directly to the end of the string
        ans += c
    else, if c is a character：
        if c is A, B or C, add "2" to the end of the ans
        if c is D, E or F, add "3" to the end of the ans
        if c is G, H or I, add "4" to the end of the ans
        if c is J, K or L, add "5" to the end of the ans
        if c is M, N or O, add "6" to the end of the ans
        if c is P, Q, R or S, add "7" to the end of the ans
        if c is T, U or V, add "8" to the end of the ans
        if c is W, X or Y, add "9" to the end of the ans
return ans as result

-------------------------------------------

R5.10 Variable scope
the i defined in line 5 only affects main, and will die out on line 8
the b defined in line 6 only affects main, and will die out on line 8
the n defined in line 12 will live until the program end
the b defined in line 19 will live until the program end
the i defined in line 22 only affects the content of for loop, and will die in line 24

the static int f(int i) aims to find out the smaller integer n whose square is less then or
equal to i
the program will out put 0+1+1+1+2+2+2+2+2+3 = 26

-------------------------------------------

R5.14
The variable a and b define in falseSwap dies when the function end.
In other words, the falseSwap only swaps the temporary variable a and b, not the
actual variable x and y

-------------------------------------------

R6.3
a. 25
b. 13
c. 12
d. 0
e. 10
f. 25
g. 12
h. 3

-------------------------------------------

R6.10
a. for (float value : values) {
       total = total + value;
   }
b. boolean skip = true;
   for (float value : values) {
       if (skip) {
           skipFirst = false;
           continue;
       }
       total = total + value;
   }
c.int index = 0;
  for (float value : values) {
      if (value == target) {
          return index;
      }
      index++;
  }


-------------------------------------------

R6.23
int count = 1;
int max = 1;
for all numbers in array
    if this number is not first number, and it is equal to the last number
        ++count;
        if count > max, max = count
    else
        count = 1
return max


-------------------------------------------

R6.29
int[][] values = new int[ROWS][COLUMNS];
• Fill all entries with 0.
for(int i=0; i<ROWS; ++i){
    for(int j=0; j<COLUMNS; ++j){
        values[i][j] = 0
    }
}
• Fill elements alternately with 0s and 1s in a checkerboard pattern.
boolean flag = true;
for(int i=0; i<ROWS; ++i){
    for(int j=0; j<COLUMNS; ++j){
    if(flag){
        values[i][j] = 1;
    }else}
        values[i][j] = 0
    }
}

• Fill only the elements at the top and bottom row with zeroes.
for(int j=0; i<COLUMNS; ++i){
    values[0][j] = 0;
    values[ROWS-1][j] = 0;
}

• Compute the sum of all elements.
int sum = 0;
for(int i=0; i<ROWS; ++i){
    for(int j=0; j<COLUMNS; ++j){
        sum += values[i][j];
    }
}
return sum;
• Print the array in tabular form.
for(int i=0; i<ROWS; ++i){
    for(int j=0; j<COLUMNS; ++j){
        System.out.print(values[i][j] + " ")
    }
    System.out.println();
}

-------------------------------------------

R6.34
True or false?
a. All elements of an array list are of the same type. T
b. Array list index values must be integers. T
c. Array lists cannot contain strings as elements. F
d. Array lists can change their size, getting larger or smaller.T
e. A method cannot return an array list. F
f. A method cannot change the size of an array list argument. F

-------------------------------------------

R7.1 will throw exception in both case

-------------------------------------------

R7.6Throwing an exception: When a program encounters an
anomalous situation that it can't handle
(e.g., dividing by zero, accessing a null object),
it throws an exception.When you expect that a piece of code might throw an exception and you want to handle that
exception rather than letting it propagate up to
higher levels in the call stack, you catch that exception.

-------------------------------------------

R7.7
Checked exception: These are exceptions that a program should anticipate and recover from.
The Java compiler checks at compile-time to make sure that these exceptions are either
caught or declared in the method signature using the throws keyword.
An example of a checked exception is FileNotFoundException.

-------------------------------------------

R7.8
IndexOutOfBoundsException is an unchecked exception because it's a subclass of RuntimeException.
It often indicates a programming error, such as trying to access an array or list using an invalid index.

-------------------------------------------

R7.11
When your program catches an exception using a catch clause, it receives an exception object

-------------------------------------------

R7.15
The next() and nextInt() methods of the Scanner class can throw the following exceptions:
NoSuchElementException: This exception is thrown if no token is found (for next()) or
if the input doesn't match the expected pattern (for nextInt()).
It indicates that the scanner has reached the end of the input without finding the
expected token.

IllegalStateException: This exception is thrown if the scanner
is closed when these methods are called.
