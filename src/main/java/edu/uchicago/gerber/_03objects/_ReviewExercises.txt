#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

-------------------------------------
R8.1 Encapsulation
Encapsulation is one of the four fundamental Object-Oriented Programming (OOP) concepts, the other
three being inheritance, polymorphism, and abstraction. Encapsulation can be described as the
bundling of data (attributes) and methods (functions) that operate on the data into a single unit
or class and restricting the access to some of the object's components.
This is a means of preventing unwanted interference and misuse of the data.


-------------------------------------
R8.4 Public interface
In Java, the term "public interface" of a class refers to the set of all public methods, attributes,
and nested types that the class exposes to other classes and objects. It provides a means for other
classes and objects to interact with instances of the class. The public interface essentially defines
how the outside world can interact with objects of the class.


-------------------------------------
R8.7 Instance versus static
An instance method is a method that operates on an instance (object) of the class. It is not prefixed
with the static keyword. A static method belongs to the class rather than any particular object instance.
It is prefixed with the static keyword. Instance method can access both instance variables (non-static fields)
and static variables. Static can access only static variables and cannot access non-static (instance) variables
or methods directly. To access instance variables or methods, a static method requires an explicit object reference.

-------------------------------------
R8.8 Mutator and accessor
In object-oriented programming, especially in languages like Java, there are commonly used patterns and conventions to interact with the attributes (or fields) of a class.
Two of these patterns involve the use of accessor and mutator methods.
 Mutator Method also known as a "setter" method, a mutator method is used to set or modify the
 value of a private attribute of an object.
 Accessor Method a lso known as a "getter" method, an accessor method is used to retrieve or obtain the value of a
 private attribute of an object without modifying it.


-------------------------------------
R8.9 Implicit parameter
The object on which a method is invoked is often referred to as the method's implicit parameter.
The arguments that you pass into a method when you call it are referred to as the method's explicit parameters.

-------------------------------------
R8.10 Implicit parameter
An instance method has exactly one implicit parameter: the object on which the method is called.
A static method does not have any implicit parameter because static methods belong to the class itself,
not any particular instance of the class.
An instance method can have as many parameter as it want.

-------------------------------------
R8.12 Constructors
A class can have multiple constructors, and these constructors can have different parameter lists. This is known as constructor overloading.
In java, you can have a class without explicitly defining any constructors. If you don't provide any constructors,
the Java compiler will automatically provide a default no-argument constructor (also called the default constructor)
for your class. This default constructor will simply call the superclass's no-argument constructor using super().
However, if you define at least one constructor, the Java compiler will not provide the default constructor.
The constructor that gets called is determined by the arguments you provide when you create a new instance of the class.
The Java compiler looks for a constructor with a matching parameter list. If it finds a matching constructor,
it invokes it; otherwise, you'll get a compile-time error.

-------------------------------------
R8.16 Instance variables
In Java, when we use the term "hidden" or "encapsulation" in the context of private instance variables,
we don't mean hiding in a security sense, as in making something completely invisible or irretrievable.
Instead, we mean hiding in a design and abstraction sense.

-------------------------------------
R8.19 The 'this' reference
In Java's Object-Oriented Programming (OOP), the this reference is a special keyword that refers to the current instance of the class.
Essentially, it points to the object for which the method was called or the constructor was invoked.

-------------------------------------
R8.20 Zero, null, false, empty String
Zero represents the absence of a numerical value.You'd use zero when working with numerical computations or initializations.
Null represents the absence of a reference value (i.e., no memory location is being pointed to). Null is often used to indicate
that a variable does not reference any object or memory location.
False is a Boolean value indicating a negative or "off" truth value. False is used in logical operations and conditions.
Empty String is an actual String object, but it contains no characters.An empty string is used when you want a string variable
to hold a valid String object but without any content.


