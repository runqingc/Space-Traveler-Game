#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

-------------------------------------------------------------------------
R12.1 OO Analysis and Design
1. Recognize how to discover classes and their responsibilities.
2. Categorize class relationships and produce UML diagrams that describe them.
3. Apply an object-oriented development process to designing a program.


-------------------------------------------------------------------------
R12.2 OO Analysis and Design
Rule of Thumb: Consider nouns in the problem domain.
Problem Statement Analysis: Read through the requirements or problem statement. Underline or highlight nouns and noun
phrases. These often represent potential classes.
Granularity: Not every noun becomes a class. Filter out based on significance to the problem. For example, in a
banking system, "Account" might be a class while "Paper" might not.
Grouping & Abstraction: Group related nouns together. If several nouns seem to be related, they might belong to the
same class or be part of a hierarchy. For instance, "Savings Account" and "Checking Account" can both be subclasses
of "Account".
External Interactions: Consider external systems or entities that the system interacts with. These might also be
represented as classes, even if they're outside the system (e.g., "PaymentGateway").



-------------------------------------------------------------------------
R12.3 OO Analysis and Design
Finding Methods:
Rule of Thumb: Consider verbs or actions associated with the identified classes.
Problem Statement Analysis: Read through the requirements or problem statement again. This time, underline or
highlight verbs and verb phrases. These often represent potential methods or operations.
Class-Action Association: Associate the identified actions with the classes they operate on or are most closely related to. For example, "deposit" and "withdraw" are actions associated with the "Account" class.
CRUD Operations: For many classes, especially those representing entities in a system, consider if you'll need basic
CRUD (Create, Read, Update, Delete) operations as methods.
Consistency & Completeness: Ensure that the methods identified cover all the required functionalities and are
consistent with the responsibilities of the class. It's important that a class doesn't become a "god object" with too
many responsibilities, and that each method clearly aligns with the class's purpose.
Remember, these rules of thumb are starting points. As you gain experience and delve deeper into object-oriented
design principles and patterns, you'll refine your intuition for identifying classes and methods. Always be open to
revisiting and refactoring your design as you understand the problem better.


-------------------------------------------------------------------------
R12.8 Relationships
----------------------------------------
|              Coin                    |
----------------------------------------
| Responsibilities        | Collaborators|
|-------------------------|--------------|
| Know its value          |              |
----------------------------------------

-----------------------------------------------------
|                CashRegister                       |
-----------------------------------------------------
| Responsibilities                  | Collaborators  |
|----------------------------------|----------------|
| Hold coins                       | Coin           |
| Compute total value of coins     | Coin           |
| Enter payment with coins details |                |
-----------------------------------------------------


-------------------------------------------------------------------------
R12.9 CRC Quiz
Class: Quiz
Responsibility:
Store a list of Question objects.
Track the current question index.
Provide the next question.
Record user's answers.
Calculate the score or percentage correct.
Reset the quiz (go back to the first question).
Collaborator:

Question
Class: Question
Responsibility:
Store the question text.
Store possible answer choices.
Store the correct answer.
Check if a given answer is correct.
Optionally, provide feedback or explanation for the answer.
Collaborator:
Quiz


-------------------------------------------------------------------------
R12.10 UML Quiz
src/main/java/edu/uchicago/gerber/_06design/uml_draft


-------------------------------------------------------------------------
R12.11 CRC Cards
1.
    classes:
        Country:
            String getName();
            double getArea();
            long getPopulation();
            double getPopulationDensity();
        CountryStatistics:
            void readCountries(String filename);
            Country getLargestAreaCountry();
            Country getLargestPopulationCountry();
            Country getLargestPopulationDensityCountry();

2.
    CRC cards:

    ---------------------------------------------------------------------------------
    -                                    Country                                    -
    ---------------------------------------------------------------------------------
    - get the country's name                -                   None                -
    - get the country's area                -                   None                -
    - get the country's population          -                   None                -
    - get the country's population density  -                   None                -
    ---------------------------------------------------------------------------------

    ---------------------------------------------------------------------------------
    -                               CountryStatistics                               -
    ---------------------------------------------------------------------------------
    - read all countries from the file                     -           None         -
    - get the country with the largest area                -          Country       -
    - get the country with the largest population          -          Country       -
    - get the country with the largest population density  -          Country       -
    ---------------------------------------------------------------------------------

3.

    The UML diagram is located under "_06design/R12_11/R12.11.puml".

4.

    javadoc documents:

    public class Country {
        private String name;
        private long population;
        private double area;

        /**
         * Construct a Country with a name, population and area.
         * @param name The name of the Country.
         * @param population The population of the Country.
         * @param area The area of the Country.
         */
        public Country(String name, long population, double area) {
            // implementation
        }

        /**
         * Returns the name of the Country.
         * @return the name of the Country.
         */
        public String getName() {
            // implementation
        }

        /**
         * Returns the area of the Country.
         * @return the are of the Country.
         */
        public double getArea() {
            // implementation
        }

        /**
         * Returns the population of the Country.
         * @return the population of the Country.
         */
        public long getPopulation() {
            // implementation
        }

        /**
         * Calculates and returns the population density of the Country.
         * @return the population density of the Country.
         */
        public double getPopulationDensity() {
            // implementation
        }
    }


    public class CountryStatistics {
        private ArrayList<Country> countries;
        /**
         * Read countries from given filename and stores them.
         * @param filename The filename to read countries.
         */
        public void readFromFile(String filename) {
            // implementation
        }

        /**
         * Finds and returns the Country with the largest area.
         * @return the Country with the largest area.
         */
        public Country getLargestAreaCountry() {
            // implementation
        }

        /**
         * Finds and returns the Country with the largest population.
         * @return the Country with the largest population.
         */
        public Country getLargestPopulationCountry() {
            // implementation
        }

        /**
         * Finds and returns the Country with the largest population density.
         * @return the Country with the largest population density.
         */
        public Country getLargestPopulationDensityCountry() {
            // implementation
        }

    }


-------------------------------------------------------------------------
R12.13 UML Diagram
src/main/java/edu/uchicago/gerber/_06design/uml_draft


-------------------------------------------------------------------------
R12.14 UML Diagram

I would use these classes:

    Employee:
        Represent a specific employee.
        Stores the name, hourly rate, employee ID.

        calculates pay given on hourly worked in every 2 weeks period.

    PayrollProcessor:
        Manager and process payrolls for all employees.

        generates the total pay for all employees including overtime work.
        generates a report for all employees.

-------------------------------------------------------------------------
R12.15 ULM Diagram
src/main/java/edu/uchicago/gerber/_06design/uml_draft



