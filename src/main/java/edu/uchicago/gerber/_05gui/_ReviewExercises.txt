#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

-----------------------------------------------------
R10.5 Events
An event object encapsulates information about a state change or an action that has occurred.It contains details
about the event. For example, in a mouse click event, the event object might contain information about the mouse's x
and y coordinates, which mouse button was clicked, how many times it was clicked, etc.
In Java's Swing library, you'll find event classes like ActionEvent, MouseEvent, KeyEvent, and many others.
An event source is the object on which the event occurs.
It's responsible for generating an event. For instance, a button in a GUI might be an event source for click events.
When a user clicks the button, the button generates (or "fires") an event.
Event sources have mechanisms to register and unregister event listeners (i.e., they keep track of which objects want
to be notified when a particular event occurs).
An event listener is an interface (or often an object implementing a specific interface) that defines methods which
will be invoked in response to certain events.
It "listens" for specific types of events and defines what action should be taken when such an event occurs.
In Java's Swing, listeners are often defined by interfaces with methods that need to be overridden.
For instance, the ActionListener interface has the actionPerformed(ActionEvent e) method, which gets called
when an action event (like a button click) happens.You attach listeners to sources. For instance, you might add
an ActionListener to a JButton so that when the button is clicked, the actionPerformed method of the listener is called.

-----------------------------------------------------
R10.6 actionPerformed
Who calls the actionPerformed method?
The Swing or AWT event dispatching system calls the actionPerformed method.
When a user interacts with a GUI component that has an associated ActionListener (like pressing a button),
the component generates an ActionEvent. The event dispatching system then notifies all registered ActionListeners
by calling their actionPerformed method, passing the ActionEvent as an argument.
When does the call to the actionPerformed method occur?
The call to the actionPerformed method occurs when an action event is generated by a GUI component. Here are some scenarios when this can happen:
A button is pressed.
A menu item is selected.
A timer fires (if you're using a javax.swing.Timer).
A user presses Enter in a text field (assuming the text field has an action listener registered).
Any other component-specific action event occurs for components that support action listeners.

-----------------------------------------------------
R10.11 Inner class and event-listeners



-----------------------------------------------------
R10.14 Object hierarchies

-----------------------------------------------------
R10.22 Graphic methods

-----------------------------------------------------
R11.2 Layout managers


-----------------------------------------------------
R11.11 ButtonGroup


-----------------------------------------------------
R11.19 Types of Events


-----------------------------------------------------
R11.20 Events



-----------------------------------------------------
R11.21 ActionListener versus MouseListener



